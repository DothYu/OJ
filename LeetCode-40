[Medium]
40. Combination Sum II

Given a collection of candidate numbers (candidates) and a target number (target), 
find all unique combinations in candidates where the candidate numbers sums to target.

Each number in candidates may only be used once in the combination.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5,
A solution set is:
[
  [1,2,2],
  [5]
]



========================
// Solution One: BackTracking

class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        // int[] visit = new int[candidates.length];
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> subResult = new ArrayList<>();
        helper(candidates, result, subResult, target, 0, 0);
        return result;
    }
    public void helper(int[] candidates, List<List<Integer>> result, List<Integer> subResult, int target, int sum, int pos) {
        if (sum == target) {
            result.add(new ArrayList<>(subResult));
            return;
        }
        if (sum > target || pos == candidates.length)
            return;
        for (int i = pos; i < candidates.length; i ++) {
            if (i > pos && candidates[i] == candidates[i - 1])
                continue;
            subResult.add(candidates[i]);
            helper(candidates, result, subResult, target, sum + candidates[i], i + 1);
            subResult.remove(subResult.size() - 1);
        }
    }
}
