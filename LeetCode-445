[Medium]
445. Add Two Numbers II

You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.

Example:

Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7



=============================================================
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode s1 = reverse(l1);
        ListNode s2 = reverse(l2);
        ListNode root = new ListNode(0);
        ListNode curr = root;
        int sum = 0;
        int carry = 0;
        while (s1 != null || s2 != null) {
            sum = carry;
            if (s1 != null) {
                sum += s1.val;
                s1 = s1.next;
            }
            if (s2 != null) {
                sum += s2.val;
                s2 = s2.next;
            }
            ListNode tmp = new ListNode(sum % 10);
            curr.next = tmp;
            curr = tmp;
            carry = sum / 10;
        }
        if (carry != 0) {
            ListNode tmp = new ListNode(carry);
            curr.next = tmp;
            curr = tmp;
        }
        return reverse(root.next);
        
    }
    private ListNode reverse(ListNode head) {
        ListNode prev = null;
        while (head != null) {
            ListNode nextTemp = head.next;
            head.next = prev;
            prev = head;
            head = nextTemp;
        }
        return prev;
    }
}


=============================================================
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<Integer> s1 = new Stack<>();
        Stack<Integer> s2 = new Stack<>();
        while (l1 != null) {
            s1.push(l1.val);
            l1 = l1.next;
        }
        while (l2 != null) {
            s2.push(l2.val);
            l2 = l2.next;
        }
        int sum = 0;
        int carry = 0;
        ListNode head = new ListNode(0);
        ListNode curr = head;
        while (!s1.empty() || !s2.empty()) {
            sum = carry;
            if (!s1.empty()) {
                sum += s1.pop();
            }
            if (!s2.empty()) {
                sum += s2.pop();
            }
            ListNode tmp = new ListNode(sum % 10);
            curr.next = tmp;
            curr = tmp;
            carry = sum / 10;    
        }
        if (carry != 0) {
            ListNode tmp = new ListNode(carry);
            curr.next = tmp;
            curr = tmp;
        }
        return reverse(head.next);
    }
    private ListNode reverse(ListNode head) {
        ListNode prev = null;
        while (head != null) {
            ListNode nextTemp = head.next;
            head.next = prev;
            prev = head;
            head = nextTemp;
        }
        return prev;
    } 
}
