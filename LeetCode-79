[Medium]
79. Word Search

Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, 
where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

Given word = "ABCCED", return true.
Given word = "SEE", return true.
Given word = "ABCB", return false.



======================================
// Solution One: BackTracking
// 对于word中第一个字符，找到它在board的位置board[x][y]，board[x1][y1]....
// 对于第二个字符，分别查找board[x+1][y], board[x-1][y],board[x][y+1],board[x][y-1]...
// 依次类推，一旦找不到对应的字符，或者超出边界，或者已经访问过，则false
// 如果遍历到word的最后一个字符，则true

class Solution {
    public boolean exist(char[][] board, String word) {
        if (word.length() == 0) return true;
        boolean[][] visited = new boolean[board.length][board[0].length];
        for (int i = 0; i < board.length; i ++) {
            for (int j = 0; j < board[i].length; j ++) {
                if (board[i][j] == word.charAt(0) && hasNext(board, visited, i, j, word, 0))
                    return true;
            }
        }
        return false;
    }
    public boolean hasNext(char[][] board, boolean[][] visited, int x, int y, String word, int pos) {
        if (pos == word.length())
            return true;
        if (x < 0 || x >= board.length || y < 0 || y >= board[x].length || board[x][y] != word.charAt(pos) || visited[x][y] == true)
            return false;
        visited[x][y] = true;
        if (hasNext(board, visited, x + 1, y, word, pos + 1) ||
            hasNext(board, visited, x - 1, y, word, pos + 1) ||
            hasNext(board, visited, x, y + 1, word, pos + 1) ||
            hasNext(board, visited, x, y - 1, word, pos + 1))
            return true;
        visited[x][y] = false;
        return false;
    }
}
