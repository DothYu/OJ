题目描述：

输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。
假设输入的前序遍历和中序遍历的结果中都不含重复的数字。
例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。


=============================================
import java.util.*;
public class Solution {
    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {
        if (pre.length == 0 || in.length == 0)
            return null;
        TreeNode root = new TreeNode(pre[0]);
        for (int i = 0; i < in.length; i ++) {
            int[] newPre;
            int[] newIn;
            if (pre[0] == in[i]) {
                if (i == 0) {
                    newPre = Arrays.copyOfRange(pre, 1, pre.length);
                    newIn = Arrays.copyOfRange(in, 1, in.length);
                    root.left = null;
                    root.right = reConstructBinaryTree(newPre, newIn);
                }
                else if (i == in.length - 1){
                    newPre = Arrays.copyOfRange(pre, 1, pre.length);
                    newIn = Arrays.copyOfRange(in, 0, in.length - 1);
                    root.right = null;
                    root.left = reConstructBinaryTree(newPre, newIn);
                }
                else {
                    int tmp = judgeBorder(pre, in, i);
                    newPre = Arrays.copyOfRange(pre, 1, tmp);
                    newIn = Arrays.copyOfRange(in, 0, i);
                    root.left = reConstructBinaryTree(newPre, newIn);
                    
                    newPre = Arrays.copyOfRange(pre, tmp, pre.length);
                    newIn = Arrays.copyOfRange(in, i+1, in.length);
                    root.right = reConstructBinaryTree(newPre, newIn);
                }
            }
        }
        return root;
    }
    public int judgeBorder(int[] pre, int[] in, int mid) {
        HashSet<Integer> set = new HashSet<>();
        for (int i = 0; i < mid; i ++) {
            set.add(in[i]);
        }
        for (int i = 1; i < pre.length; i ++) {
            if (!set.contains(pre[i]))
                return i;
        }
        return 0;
    }
}
