[Medium]
47. Permutations II

Given a collection of numbers that might contain duplicates, return all possible unique permutations.

Example:

Input: [1,1,2]
Output:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]




================================================

// Solution One: BackTracking

class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> subResult = new ArrayList<>();
        int[] visited = new int[nums.length];
        Arrays.sort(nums);
        if (nums.length > 0)
            helper(nums, visited, result, subResult, 0);
        return result;
    }
    public void helper(int[] nums, int[] visited, List<List<Integer>> result, List<Integer> subResult, int pos) {
        if (pos == nums.length) {
            result.add(new ArrayList<>(subResult));
            return;
        }
        for (int i = 0; i < nums.length; i ++) {
            if (visited[i] == 1 || (i > 0 && nums[i] == nums[i - 1] && visited[i - 1] == 0))
                continue;
            subResult.add(nums[i]);
            visited[i] = 1;
            helper(nums, visited, result, subResult, pos + 1);
            subResult.remove(subResult.size() - 1);
            visited[i] = 0;
        }
        
    }
}
