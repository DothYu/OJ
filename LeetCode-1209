[Medium]
1209. Remove All Adjacent Duplicates in String II

Given a string s, a k duplicate removal consists of choosing k adjacent and 
equal letters from s and removing them causing the left and the right side of the deleted substring to concatenate together.

We repeatedly make k duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made.

It is guaranteed that the answer is unique.


=============================
Example 1:
Input: s = "abcd", k = 2
Output: "abcd"
Explanation: There's nothing to delete.

Example 2:
Input: s = "deeedbbcccbdaa", k = 3
Output: "aa"
Explanation: 
First delete "eee" and "ccc", get "ddbbbdaa"
Then delete "bbb", get "dddaa"
Finally delete "ddd", get "aa"

Example 3:
Input: s = "pbbcggttciiippooaais", k = 2
Output: "ps"
 

Constraints:
1 <= s.length <= 10^5
2 <= k <= 10^4
s only contains lower case English letters.


============================
// recursion

class Solution {
    private String result = "";
    public String removeDuplicates(String s, int k) {
        remove(s, k);
        return result;
    }
    private void remove(String s, int k) {
        int n = s.length();
        int left = 0, right = k - 1;
        boolean flag = false;
        StringBuilder sb = new StringBuilder();
        while (left < n) {
            if (right < n && check(s, left, right)) {
                left = right + 1;
                right = left + k - 1;
                flag = true;
            } else {
                sb.append(s.charAt(left));
                left ++;
                right ++;
            }
        }
        if (!flag) {
            result = sb.toString();
            return;
        } else{
            remove(sb.toString(), k);
        }
    }   
    private boolean check(String s, int left, int right) {
        while (left <= right) {
            char c = s.charAt(left);
            if (s.charAt(left) != c || s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left ++;
            right --;
        }
        return true;
    }
}


============================
// nice solution
class Solution {
    public String removeDuplicates(String s, int k) {
        int n = s.length();
        char[] cs = new char[n];
        int[] count = new int[n];
        int index = 0;
        for (char c: s.toCharArray()) {
            if (index > 0 && c == cs[index - 1]) {
                if (++count[index - 1] == k) {
                    index --;
                }
            } else {
                cs[index] = c;
                count[index] = 1;
                index ++;
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < index; i ++) {  // 注意这里的边界条件是i < index
            for (int j = 0; j < count[i]; j ++) {
                sb.append(cs[i]);
            }
        }
        return sb.toString();
    }
}
