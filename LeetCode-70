[Easy]
70. Climbing Stairs

You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.

Example 1:

Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

Example 2:

Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

-----------------------------------------------------------------------------------------------
Solution One:
// Brute Force
// Time complexity : O(2^n),Size of recursion tree will be 2^n
// Space complexity : O(n). The depth of the recursion tree can go upto n 
// figure out following formula：
// climbStairs(i,n)=climbStairs(i+1,n)+climbStairs(i+2,n)
// where i defines the current step and n defines the destination step.

// didn't pass, time limit exceeded
class Solution {
    public int climbStairs(int n) {
        return climb(0, n);
    }
    public int climb (int i, int n) {
        if(i > n)
            return 0;
        if(i == n)
            return 1;
        else
            return climb(i+1, n) + climb(i+2, n);
    }
}



-----------------------------------------------------------------------------------------------
// Solution Two: 时间复杂度O(n), 空间复杂度O(n)
// In the previous approach we are redundantly calculating the result for every step.
// Instead, we can store the result at each step in memo array 
// and directly returning the result from the memo array whenever that function is called again.
// In this way we are pruning recursion tree with the help of memo array and reducing the size of recursion tree upto n.

class Solution {
    public int climbStairs(int n) {
        int[] memo = new int[n + 1];
        return climb(0, n, memo);
    }
    public int climb(int i, int n, int[] memo) {
        if(i > n)
            return 0;
        if(i == n)
            return 1;
        if(memo[i] > 0)
            return memo[i];
        memo[i] = climb(i + 1, n, memo) + climb(i + 2, n, memo);
        return memo[i];
    }
}



-----------------------------------------------------------------------------------------------
// Solution Three: 时间复杂度O(n), 空间复杂度O(n)
// DP
// the total number of ways to reach is equal to sum of ways of reaching (i-1)step and ways of reaching (i-2)step.
// 即：dp[i] = dp[i-1] + dp[i-2]
// dp[i] denotes the number of ways to reach on i step

class Solution {
    public int climbStairs(int n) {
        if(n == 1)
            return 1;
        int[] dp = new int[n + 1];
        dp[1] = 1;
        dp[2] = 2;
        for(int i=3; i<=n; i++) {
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }
}

















