[Medium]
90. Subsets II

Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: [1,2,2]
Output:
[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]



=============================================================

// Solution One: BackTracking

class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> subResult = new ArrayList<>();
        int[] visited = new int[nums.length];
        helper(result, subResult, nums, visited, 0, 0);
        return result;
    }
    public void helper(List<List<Integer>> result, List<Integer> subResult, int[] nums, int[] visited, int pos, int cur) {
        result.add(new ArrayList<>(subResult));
        if (pos == nums.length)
            return;
        for (int i = cur; i < nums.length; i ++) {
            if (visited[i] == 1 || (i > cur && nums[i] == nums[i - 1] && visited[i - 1] == 0))
                continue;
            subResult.add(nums[i]);
            visited[i] = 1;
            helper(result, subResult, nums, visited, pos + 1, i);
            subResult.remove(subResult.size() - 1);
            visited[i] = 0;
        }
    }
}
