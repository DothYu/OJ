[Hard]
10. Regular Expression Matching

Given an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

Note:

s could be empty and contains only lowercase letters a-z.
p could be empty and contains only lowercase letters a-z, and characters like . or *.
Example 1:

Input:
s = "aa"
p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input:
s = "aa"
p = "a*"
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
Example 3:

Input:
s = "ab"
p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".
Example 4:

Input:
s = "aab"
p = "c*a*b"
Output: true
Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches "aab".
Example 5:

Input:
s = "mississippi"
p = "mis*is*p*."
Output: false



=================================
// recursion

class Solution {
    public boolean isMatch(String s, String p) {
        if (s == null || p == null) {
            return false;
        }
        return match(s.toCharArray(), p.toCharArray(), 0, 0);
    }
    private boolean match(char[] s, char[] p, int i, int j) {
        if (i == s.length && j == p.length) {
            return true;
        }
        if (i != s.length && j == p.length) {
            return false;
        }
        if ((j + 1) < p.length && p[j + 1] == '*') {
            // 如果下一个正则表达式为*
            if ((i != s.length && s[i] == p[j]) || (i != s.length && p[j] == '.')) {
                return match(s, p, i, j + 2)
                        || match(s, p, i + 1, j + 2)
                        || match(s, p, i + 1, j);
            } else {
                return match(s, p, i, j + 2);
            }
        }
        else if ((i != s.length && s[i] == p[j]) || (i != s.length && p[j] == '.')) {
            return match(s, p, i + 1, j + 1);
        }
        return false;
    }
}
public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();
        solution.isMatch("aa", "a*");
    }
}


=============================================
// dp
