155. Min Stack

Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
Example:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.


------------------------------------------------------------------------------------------
Solution One:
/** 方法一：用一个栈
 *  当有新最小值进来时，将旧最小值保存到栈中的第二个位置；如果弹出的元素是当前栈的最小值，则将最小值更新为之前保存的旧最小值；
 */
class MinStack {
    int min = Integer.MAX_VALUE;
    Stack<Integer> stack = new Stack<>();
    
    public MinStack() {
        
    }
    
    public void push(int x) {
        // 注意这里是<=，当有新最小值进来时，将旧最小值保存到栈中的第二个位置
        if(x <= min) {
            stack.push(min);
            min = x;
        }
        stack.push(x);
    }
    
    public void pop() {
        // 如果弹出的元素是当前栈的最小值，则将最小值更新为之前保存的旧最小值
        if(stack.pop() == min)
            min = stack.pop();
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int getMin() {
        return min;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
 
 
 
--------------------------------------------------------------------------------------------
Solution Two:
/** 方法二：用来两个栈
 * 一个栈用来保存元素，另一个栈用来保存最小值
 */
class MinStack {
    Stack<Integer> stack = new Stack<>();
    Stack<Integer> minStack = new Stack<>();
    
    public MinStack() {
        
    }
    
    public void push(int x) {
        stack.push(x);
        if(minStack.isEmpty() || minStack.peek() >= x)
            minStack.push(x);
    }
    
    public void pop() {
        // 在这里比较两个栈中的整型元素，需要使用equals方法，而非“==”，“==”比较的是地址。
        if(stack.pop().equals(minStack.peek()))
            minStack.pop();
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int getMin() {
        return minStack.peek();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
 
 
--------------------------------------------------------------------------------------------
Solution Three:
/** 方法三：使用链表实现Min Stack
 *  链表中每个节点保存三个元素：当前值，当前最小值，指向的下一个节点（保存进入栈的顺序）
 */
class MinStack {
    public Node head;
    
    public MinStack() {
        
    }
    
    public void push(int x) {
        if(head == null) {
            head = new Node(x, x);
        } else {
            head = new Node(x, Math.min(x, head.min), head);
        }
    }
    
    public void pop() {
        head = head.next;
    }
    
    public int top() {
        return head.value;
    }
    
    public int getMin() {
        return head.min;
    }
    
    public class Node {
        public int value;
        public int min;
        public Node next;
        
        public Node(int value, int min){
            this.value = value;
            this.min = min;
            this.next = null;
        }
        
        public Node(int value, int min, Node next){
            this.value = value;
            this.min = min;
            this.next = next;
        }
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
