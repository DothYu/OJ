[Easy]
141. Linked List Cycle

Given a linked list, determine if it has a cycle in it.

To represent a cycle in the given linked list, 
we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, 
then there is no cycle in the linked list.

Example 1:

Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where tail connects to the second node.


Example 2:

Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where tail connects to the first node.


Example 3:

Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.



Follow up:
Can you solve it using O(1) (i.e. constant) memory?


=======================================================================================================================
// Solution One: Time Complexity: O(n), Space Complexity: O(n)
// HashMap
// 遍历链表，并同时存进HashMap中，当访问到某节点，HashMap已存在，则表示有回路


/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        HashMap<ListNode, Integer> map = new HashMap<>();
        while (head != null) {
            if (map.containsKey(head))  return true;
            else {
                map.put(head, 1);
                head = head.next;
            }
        }
        return false;
    }
}



//Runtime: 5 ms, faster than 18.95% of Java online submissions for Linked List Cycle.
//Memory Usage: 38.7 MB, less than 28.94% of Java online submissions for Linked List Cycle.

=======================================================================================================================


// Solution Two: Time Complexity: O(n), Space Complexity: O(n)
// Hash Table
// 遍历链表，并同时存进Hash Table中，当访问到某节点，Hash Table已存在，则表示有回路


/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        Set<ListNode> set = new HashSet<>();
        while(head != null) {
            if (set.contains(head)) return true;
            else    set.add(head);
            head = head.next;
        }
        return false;
    }
}



=======================================================================================================================

// Solution Three: Time Complexity: O(), Space Complexity: O()
// Two pointers
// 设置两个指针，一个快指针，两步一跳，一个慢指针，一步一跳；
// 如果不存在回环，则快指针最终指向null；
// 如果存在回环，则快指针最终会与慢指针相遇。


// nice move
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode fast = head, slow = head;
        while(fast != null) {
            if (fast.next != null) {
                fast = fast.next.next;
                slow = slow.next;
            }else    
                return false;
            if (fast == slow)   
                return true;
        }
        return false;
    }
}


//Runtime: 0 ms, faster than 100.00% of Java online submissions for Linked List Cycle.
//Memory Usage: 38.8 MB, less than 9.16% of Java online submissions for Linked List Cycle.

