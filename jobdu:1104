题目1104：整除问题
时间限制：1 秒内存限制：32 兆特殊判题：否提交：6418解决：2223
题目描述：
给定n，a求最大的k，使n！可以被a^k整除但不能被a^(k+1)整除。
输入：
两个整数n(2<=n<=1000)，a(2<=a<=1000)
输出：
一个整数.
样例输入：
6 10
样例输出：
1
来源：
2011年上海交通大学计算机研究生机试真题



算法思想：由于n!和a^k可能数值非常巨大，而不能被int(甚至long long)保存，因此也不能直接用余数操作来判断它们是否存在整除关系。
        又由于：n!能被a^k整除，那么若a^k存在素因数px，则n!也必存在该素因数，且该素因数在n!中对应的幂指数一定大于等于在a^k中的幂指数。
        即 要确定最大的非负整数k，使a中任一素因数的幂指数的k倍依旧小于或等于该素因数在n!中对应的素因数。所有倍数中最小的那个即为我们要求的k。
        所以接下去所要做的工作即是：对a和n!进行分解素因数。
        对a进行分解素因数简单。
        对n!分解素因数分析如下：因为n!的数值可能非常巨大，所以不能像分解a一样分解它。试着考虑n!中含有的素因数p的个数，即确定素因数p对应的幂指数。
        n!中包含了1～n区间内所有整数的乘积，这些乘积中每一个p的倍数（包括其本身）都将对n!贡献至少一个p因子，且在1～n中p的倍数共有n/p个，则p的因子
        至少有n/p个，即n/p个整数至少贡献一个p因子。类推：p*p的倍数将为n!贡献至少2个p因子，这样的整数有n/(p*p)个；同理，p*p*p的倍数将为n!贡献至少
        3个p因子.....依此类推。
        具体步骤如下：
        (1) 计算机清零，该计数器表示n!中将有几个p因子，即n!分解质因数后素因子p对应的幂指数。
        (2) 计算n/p，有n/p个整数可以像n!提供一个p因子，则计数器累加n/p。若n/p等于0，则表示没有一个整数可以向n!提供一个或一个以上的p因子，分解结束。
        (3) 计算n/(p*p)，有n/(p*p)个整数可以向n!提供两个p因子，但它们在之前步骤中每个数都已经向计数器累加了1个p因子，所以它们还能够向计数器贡献
            n/(p*p)个因子。若n/(p*p)=0，则分解完成。
        (4) ......依此类推。
        
        完成这些步骤以后，就能计算出n!中所有p的因子数，即计数器中累加的结果即为素因数p的幂指数。
        
        
        
        
        
#include <cstdio>
#include <cstring>
#define MAXN 1005
int prime[MAXN];
int primeSize;
bool mark[MAXN];

void Init(){
	primeSize = 0;
	for(int i=0; i<MAXN; i++)
		mark[i] = false;
	for(int i=2; i<MAXN; i++){
		if(mark[i]==true)
			continue;
		prime[primeSize++] = i;
		for(int j=i*i; j<MAXN; j+=i)
			mark[j] = true;
	}		
}

int cnt[MAXN];		//用来存放prime[i]所保存在n!中的因子数，可能为0

int cnt2[MAXN];		//用来表示prime[i]所保存的素数在a中的因子数

int main(){
	Init();
	int n,a;
	while(~scanf("%d%d",&n,&a)){
		for(int i=0; i<primeSize; i++)			//将两个计数器清零
			cnt[i] = cnt2[i] = 0;
		for(int i=0; i<primeSize; i++){
			int p = prime[i];
			while(n/p){
				cnt[i] += n/p;
				p *= prime[i];
			}
		}
		int ans = 123123123;			//答案初试为一个大整数，为取最小值做准备
		for(int i=0; i<primeSize; i++){
			while(a%prime[i]==0){
				cnt2[i]++;
				a /= prime[i];
			}
			if(cnt2[i]==0)
				continue;
			if(cnt[i]/cnt2[i] < ans)
				ans = cnt[i]/cnt2[i];
		}
		printf("%d\n",ans);
	}
	return 0;
}
