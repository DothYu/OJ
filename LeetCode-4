[Hard]
4. Median of Two Sorted Arrays

There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5


===========================================
// 利用归并排序，将两个有序数组合并成一个数组。
// 时间复杂度: O(nlogn)

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] nums = new int[nums1.length + nums2.length];
        int i = 0, j = 0, k = 0;
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] < nums2[j]) {
                nums[k ++] = nums1[i ++];
            } else {
                nums[k ++] = nums2[j ++];
            }
        }
        while (i < nums1.length) {
            nums[k ++] = nums1[i ++];
        }
        while (j < nums2.length) {
            nums[k ++] = nums2[j ++];
        }
        if (nums.length % 2 != 0)
            return (double) nums[nums.length / 2];
        else
            return (double)(nums[nums.length / 2 - 1] + nums[nums.length / 2]) / 2;
    }
}



===========================================
// 不需要全部排序，只需找到比mid小的所有元素即可，从两个数组头开始比较。
// 时间复杂度：O(n)

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        boolean isOdd = (m + n) % 2 != 0;
        int i = 0, j = 0, index = 0;
        int mid = (m + n) / 2;
        int current = 0;
        int prev = 0;
        while (i < m || j < n) {
            prev = current;
            if (i < m && j < n) {
                if (nums1[i] < nums2[j]) {
                    current = nums1[i ++];
                } else
                    current = nums2[j ++];
            } else {
                if (i < m)
                    current = nums1[i ++];
                else
                    current = nums2[j ++];
            }
            index ++;
            if (index == mid + 1) {
                return isOdd ? (double) current : (prev + (double)(current - prev) / 2);
            }
        }
        return 0.0;
    }
}


