[Medium]
78. Subsets

Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]



==================================
// Solution One: BackTracking

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> subResult = new ArrayList<>();
        if (nums.length > 0)
            helper(result, subResult, nums, 0, 0);
        return result;
    }
    public void helper(List<List<Integer>> result, List<Integer> subResult, int[] nums, int pos, int cur) {
        result.add(new ArrayList<>(subResult));
        if (pos == nums.length)
            return;
        for (int i = cur; i < nums.length; i ++) {
            if (subResult.contains(nums[i]))
                continue;
            subResult.add(nums[i]);
            helper(result, subResult, nums, pos + 1, i);
            subResult.remove(subResult.size() - 1);
        }
    }
}
