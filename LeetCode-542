[Medium]
542. 01 Matrix

Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.

The distance between two adjacent cells is 1.

 

Example 1:

Input:
[[0,0,0],
 [0,1,0],
 [0,0,0]]

Output:
[[0,0,0],
 [0,1,0],
 [0,0,0]]
Example 2:

Input:
[[0,0,0],
 [0,1,0],
 [1,1,1]]

Output:
[[0,0,0],
 [0,1,0],
 [1,2,1]]
 

Note:

The number of elements of the given matrix will not exceed 10,000.
There are at least one 0 in the given matrix.
The cells are adjacent in only four directions: up, down, left and right.



==================================
// Time Limit Exceeded
class Solution {
    public int[][] updateMatrix(int[][] matrix) {
        for (int i = 0; i < matrix.length; i ++) {
            for (int j = 0; j < matrix[i].length; j ++) {
                matrix[i][j] = bfs(matrix, i, j);
            }
        }
        return matrix;
    }
    private int bfs(int[][] matrix, int i, int j) {
        if (matrix[i][j] == 0) {
            return 0;
        }
        Queue<Integer> rowQueue = new LinkedList<>();
        Queue<Integer> colQueue = new LinkedList<>();
        boolean[][] visited = new boolean[matrix.length][matrix[i].length];
        int distance = 0;
        rowQueue.offer(i);
        colQueue.offer(j);
        visited[i][j] = true;
        while (!rowQueue.isEmpty() && !colQueue.isEmpty()) {
            int size = rowQueue.size();
            while (size -- > 0) {
                int temp_i = rowQueue.poll();
                int temp_j = colQueue.poll();
                if (matrix[temp_i][temp_j] == 0) {
                    return distance;
                }
                if (temp_i >= 1 && !visited[temp_i - 1][temp_j]) {
                    rowQueue.offer(temp_i - 1);
                    colQueue.offer(temp_j);
                    visited[temp_i - 1][temp_j] = true;
                }
                if (temp_i < matrix.length - 1 && !visited[temp_i + 1][temp_j]) {
                    rowQueue.offer(temp_i + 1);
                    colQueue.offer(temp_j);
                    visited[temp_i + 1][temp_j] = true;
                }
                if (temp_j >= 1 && !visited[temp_i][temp_j - 1]) {
                    rowQueue.offer(temp_i);
                    colQueue.offer(temp_j - 1);
                    visited[temp_i][temp_j - 1] = true;
                }
                if (temp_j < matrix[temp_i].length - 1 && !visited[temp_i][temp_j + 1]) {
                    rowQueue.offer(temp_i);
                    colQueue.offer(temp_j + 1);
                    visited[temp_i][temp_j + 1] = true;
                }
            }
            ++ distance;
        }
        return distance;
    }
}



=========================
class Solution {
    public int[][] updateMatrix(int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < m; i ++) {
            for (int j = 0; j < n; j ++) {
                if (matrix[i][j] == 0){
                    queue.offer(new int[]{i, j});
                } else {
                    matrix[i][j] = Integer.MAX_VALUE;
                }
            }
        }
        // 上、下、左、右
        int[][] dirs = new int[][] {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

        while (!queue.isEmpty()) {
            int[] cell = queue.poll();
            for (int[] d: dirs) {
                int r = cell[0] + d[0];
                int c = cell[1] + d[1];
                if (r < 0 || r >= m || c < 0 || c >= n || matrix[r][c] <= matrix[cell[0]][cell[1]] + 1) {
                    continue;
                }
                queue.offer(new int[]{r, c});
                matrix[r][c] = matrix[cell[0]][cell[1]] + 1;
            }
        }
        return matrix;
    }
}
