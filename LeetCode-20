[Easy]
20. Valid Parentheses

Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.

Example 1:

Input: "()"
Output: true
Example 2:

Input: "()[]{}"
Output: true
Example 3:

Input: "(]"
Output: false
Example 4:

Input: "([)]"
Output: false
Example 5:

Input: "{[]}"
Output: true


------------------------------------------------------------------------
Solution One:
// 方法一： 时间复杂度O(n), 空间复杂度O(n)
// 1. 使用栈，当出现左括号时"( [ {"时将之压入栈，当出现右括号时，则将栈顶元素pop，查看与右括号是否配对。
// 2. 若不配对，则invalid；若配对则继续。
// 3. 如果匹配到了最后的字符，栈中仍有元素，则invalid；否则valid。

class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for(int i=0; i<s.length(); i++) {
            if(s.charAt(i) == '(' || s.charAt(i) == '[' || s.charAt(i) == '{')
                stack.push(s.charAt(i));
            else {
                if(stack.empty())
                    return false;
                if(!isMatch(stack.peek(), s.charAt(i)))
                    return false;
                else
                    stack.pop();
            }
        }
        return stack.empty();
    }
    public boolean isMatch(char x, char y) {
        if((x == '(' && y == ')') || (x == '[' && y == ']') || (x == '{' && y == '}'))
            return true;
        return false;
    }
}

/**Result: Success
Runtime: 4 ms, faster than 91.76% of Java online submissions for Valid Parentheses.
Memory Usage: 37.2 MB, less than 17.11% of Java online submissions for Valid Parentheses.
**/


------------------------------------------------------------------------
Solution Two:
// 方法二： 时间复杂度O(n), 空间复杂度O(n)
// 方法一的改进版

// awesome solution
class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for(char c : s.toCharArray()) {
            if(c == '(')
                stack.push(')');
            else if(c == '[')
                stack.push(']');
            else if(c == '{')
                stack.push('}');
            else{
                if(stack.empty() || stack.pop() != c)
                    return false;
            }
        }
        return stack.empty();
    }
}


/**Result: Success
Runtime: 3 ms, faster than 99.68% of Java online submissions for Valid Parentheses.
Memory Usage: 37.2 MB, less than 20.31% of Java online submissions for Valid Parentheses.
**/



