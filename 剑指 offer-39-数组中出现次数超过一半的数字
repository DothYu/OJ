题目描述
数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。
由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。
如果不存在则输出0。

========================
//Solution one:
//Time complexity: O(n)
//Space complexity: O(n)

import java.util.*;
public class Solution {
    public int MoreThanHalfNum_Solution(int [] array) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int a: array) {
            if (map.containsKey(a)) {
                map.put(a, map.get(a) + 1);
            } else {
                map.put(a, 1);
            }
            if (map.get(a) > array.length / 2) {
                return a;
            }
        }
        return 0;
    }
}

========================
//Solution two: 利用快排思想，Partition函数
//Time complexity: O(n)
//Space complexity: O(1)

import java.util.*;
public class Solution {
    public int MoreThanHalfNum_Solution(int [] array) {
        if (array.length == 0) {
            return 0;
        }
        int mid = array.length / 2;
        int start = 0, end = array.length - 1;
        int index = Partition(array, start, end);
        while (index != mid) {
            if (index > mid) {
                end = index - 1;
                index = Partition(array, start, end);
            } else {
                start = index + 1;
                index = Partition(array, start, end);
            }
        }
        int result = array[mid];
        int count = 0;
        for (int i = 0; i < array.length; i ++) {
            if (array[i] == result) {
                count ++;
            }
        }
        return count > mid ? result : 0;
    }
    private int Partition(int[] array, int start, int end) {
        int temp = array[start];
        while (start < end) {
            while (start < end && array[end] >= temp) {
                end --;
            }
            if (start < end) {
                array[start] = array[end];
                start ++;
            }
            while (start < end && array[start] <= temp) {
                start ++;
            }
            if (start < end) {
                array[end] = array[start];
                end --;
            }
        }
        array[start] = temp;
        return start;
    }
}



========================
//Solution three:
//Time complexity: O(n)
//Space complexity: O(1)
import java.util.*;
public class Solution {
    public int MoreThanHalfNum_Solution(int [] array) {
        if (array.length == 0) {
            return 0;
        }
        int result = array[0];
        int count = 1;
        for (int i = 1; i < array.length; i ++) {
            if (count == 0) {
                result = array[i];
                count = 1;
            } else if (array[i] == array[i - 1]) {
                count ++;
            } else {
                count --;
            }
        }
        count = 0;
        for (int i = 0; i < array.length; i ++) {
            if (array[i] == result) {
                count ++;
            }
        }
        return count > array.length / 2 ? result : 0;
    }
}
