[Easy]
101. Symmetric Tree

Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following [1,2,2,null,3,null,3] is not:
    1
   / \
  2   2
   \   \
   3    3
Note:
Bonus points if you could solve it both recursively and iteratively.



===========================================================================================

Solution One:时间复杂度O(n),空间复杂度O(logn) ~ O(n)
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if (root == null)
            return true;
        return check(root.left, root.right);
    }
    public boolean check(TreeNode left, TreeNode right) {
        if(left == null && right == null)
            return true;
        if(left == null || right == null)
            return false;
        if(left.val != right.val)
            return false;
        return check(left.left, right.right) && check(left.right, right.left);
    }
}


===========================================================================================

Solution Two:时间复杂度O(n),空间复杂度O(logn) ~ O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        return check(root, root);
    }
    public boolean check(TreeNode left, TreeNode right) {
        if(left == null && right == null)   return true;
        if(left == null || right == null)   return false;
        return (left.val == right.val) && check(left.left, right.right)
            && check(left.right, right.left);
    }
}




===========================================================================================

Solution Three:时间复杂度O(n),空间复杂度O(n)
// Iterative, use two stack
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null)
            return true;
        Stack<TreeNode> lstack = new Stack<>();
        Stack<TreeNode> rstack = new Stack<>();
        lstack.push(root);
        rstack.push(root);
        while(!lstack.empty()) {
            TreeNode left = lstack.pop();
            TreeNode right = rstack.pop();
            if(!check(left, right)) return false;
            if(left.left != null)   lstack.push(left.left);
            if(right.right != null) rstack.push(right.right);
            if(lstack.size() != rstack.size())  return false;
            if(left.right != null)  lstack.push(left.right);
            if(right.left != null)  rstack.push(right.left);
            if(lstack.size() != rstack.size())  return false;       
        }
        return lstack.size() == rstack.size();
    }
    
    public boolean check(TreeNode left, TreeNode right) {
        if (left == null && right == null)  return true;
        if (left == null || right == null)  return false;
        if (left.val == right.val)  return true;
        return false;
    }
}


===========================================================================================
Solution Four: 时间复杂度O(n), 空间复杂度O(n)
// Iterative, use one deque

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        q.offer(root);
        while(!q.isEmpty()) {
            TreeNode t1 = q.poll();
            TreeNode t2 = q.poll();
            if(t1 == null && t2 == null)    continue;
            if(t1 == null || t2 == null)    return false;
            if(t1.val != t2.val)    return false;
            q.offer(t1.left);
            q.offer(t2.right);
            q.offer(t1.right);
            q.offer(t2.left);
        }
        return true;
    }
}

