[Medium]
46. Permutations

Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]



=========================================

// Solution One: BackTracking

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> subResult = new ArrayList<>();
        if (nums.length > 0)
            helper(nums, result, subResult, 0);
        return result;
    }
    public void helper(int[] nums, List<List<Integer>> result, List<Integer> subResult, int pos) {
        if (pos == nums.length) {
            result.add(new ArrayList<>(subResult));
            return;
        }
        for (int i = 0; i < nums.length; i ++) {
            if (subResult.contains(nums[i]))
                continue;
            subResult.add(nums[i]);
            helper(nums, result, subResult, pos + 1);
            subResult.remove(subResult.size() - 1);
        }
    }
}
