[Medium]
62. Unique Paths

A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. 
The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?


Note: m and n will be at most 100.

Example 1:

Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Right -> Down
2. Right -> Down -> Right
3. Down -> Right -> Right
Example 2:

Input: m = 7, n = 3
Output: 28




=============================================
// 类似于阶梯问题，用DP解决
// 状态转移方程：dp[i][j] = dp[i][j - 1] + dp[i - 1][j]
// 边界条件：
//      1. 当i = j = 0时，无意义；
//      2. 当i = j = 1时，不需要移动；
//      3. 由于只能往下和往右，所以当处于边界线上时只有一种途径：一直向右或者一直向下
//         即:当(i = n && j = 1) || (i = 1 && j = n)时，dp[i][j] = 1;

class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m + 1][n + 1];
        for (int i = 1; i <= m; i ++) 
            dp[i][1] = 1;
        for (int j = 1; j <= n; j ++) 
            dp[1][j] = 1;
        
        for (int i = 2; i <= m; i ++) {
            for (int j = 2; j <= n; j ++) {
                dp[i][j] = dp[i][j - 1] + dp[i - 1][j];
            }
        }
        return dp[m][n];
    }
}
