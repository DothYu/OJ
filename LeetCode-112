[Easy]
112. Path Sum

Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the 
values along the path equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \      \
7    2      1
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.



=========================================================================================================
Solution One: Recursion
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if (root == null)   return false;
        if (isLeaf(root) && root.val == sum)    return true;
        
        return (hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val));
    }
    public boolean isLeaf(TreeNode node) {
        if (node.left == null && node.right == null)    return true;
        return false;
    }
}



=========================================================================================================

// Solution Two:
// DFS, change the val of the node
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if (root == null)   return false;
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while(!stack.empty()) {
            TreeNode node = stack.pop();
            if (node.right != null) {
                stack.push(node.right);
                node.right.val += node.val;
            }
            if (node.left != null) {
                stack.push(node.left);
                node.left.val += node.val;
            }
            if (isLeaf(node) && node.val == sum) 
                return true;
        }
        return false;
        
    }
    
    public boolean isLeaf(TreeNode node) {
        if (node.left == null && node.right == null)    return true;
        return false;
    }
}
