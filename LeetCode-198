[Easy] House Robber

You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, 
the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and 
it will automatically contact the police if two adjacent houses were broken into on the same night.

Given a list of non-negative integers representing the amount of money of each house, 
determine the maximum amount of money you can rob tonight without alerting the police.

Example 1:

Input: [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
             Total amount you can rob = 1 + 3 = 4.
Example 2:

Input: [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
             Total amount you can rob = 2 + 9 + 1 = 12.
             
------------------------------------------------
Solution One:
 /**
 * 递归方法：
 * 1.我们从最后一家开始考虑，选择就两个，偷或者不偷，偷了会怎么样，不偷会怎么样
 * 2.我偷了的话，比如偷的是n，那么下次只能从n-2开始考虑它的最大价值方案。
 * 3.不偷的话，就是考虑n-1的最大价值方案。
 * 4.最简单的实现就是递归来实现，主要是要考虑一下函数的出口条件，即偷到第一家了是什么样，以及第一家之前没有人家了怎么办。
**/

// cannot pass 数据量大时，时间复杂度高O(2^n)
class Solution {
    public int rob(int[] nums) {
        return rob(nums, nums.length-1);
    }
    private int rob(int[] nums, int n) {
        if(n < 0){
            return 0;
        } else if(n == 0){
            return nums[0];
        } else {
            int A = rob(nums, n-2) + nums[n];
            int B = rob(nums, n-1);
            return A > B ? A : B;
        }
    }
}

------------------------------------------------
Solution two:
/**
 * 非递归方法（自顶向下）：
 * 1.我们从最后一家开始考虑，选择就两个，偷或者不偷，偷了会怎么样，不偷会怎么样
 * 2.我偷了的话，比如偷的是n，那么下次只能从n-2开始考虑它的最大价值方案。
 * 3.不偷的话，就是考虑n-1的最大价值方案。
 * 4.采用非递归方法，用一个临时数组来保存每次选择（偷与不偷）时的最优解，依次下去，临时数组的最后一个元素即为最优解。
**/


class Solution {
    public int rob(int[] nums) {
        if(nums.length <= 0) {
            return 0;
        }
        if(nums.length == 1) {
            return nums[0];
        }
        
        int temp[] = new int[nums.length];
        temp[0] = nums[0];
        temp[1] = nums[0] > nums[1] ? nums[0] : nums[1];
        for(int i=2; i<nums.length; i++) {
            int A = temp[i-2] + nums[i];
            int B = temp[i-1];
            int max = A > B ? A : B;
            temp[i] = max;
        }
        return temp[nums.length-1];
    }
}

------------------------------------------------
Solution three:
/**
 * 广义动态规划（DP）算法（自顶向下）：
 * 1.我们从最后一家开始考虑，选择就两个，偷或者不偷，偷了会怎么样，不偷会怎么样
 * 2.我偷了的话，比如偷的是n，那么下次只能从n-2开始考虑它的最大价值方案。
 * 3.不偷的话，就是考虑n-1的最大价值方案。
 * 4.不同于第二种方法，使用两个变量即可，无需临时数组，节省空间。
**/

// best solution
class Solution {
    public int rob(int[] nums) {
        if(nums.length <= 0) {
            return 0;
        }
        if(nums.length == 1) {
            return nums[0];
        }

        int tempA = nums[0];
        int tempB = nums[0] > nums[1] ? nums[0] : nums[1];
        for(int i=2; i<nums.length; i++){
            int A = tempA + nums[i];
            int B = tempB;
            int max = A > B ? A : B;
            tempA = tempB;
            tempB = max;
        }
        return tempB;
    }
}

------------------------------------------------
Solution four:
/**
 * 动态规划（自底向上）：
 * 1.我们从最后一家开始考虑，选择就两个，偷或者不偷，偷了会怎么样，不偷会怎么样
 * 2.我偷了的话，比如偷的是n，那么下次只能从n-2开始考虑它的最大价值方案。
 * 3.不偷的话，就是考虑n-1的最大价值方案。
**/

class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if(n <= 0)
            return 0;
        if(n == 0)
            return nums[0];
        
        int tmp[] = new int[n];
        tmp[n-1] = nums[n-1];
        for(int i=n-2;i>=0;i--){
            for(int j=i;j<n;j++){
                tmp[i] = Math.max(tmp[i],nums[j] + (j+2<n?tmp[j+2]:0));
            }
        }
        return tmp[0];
    }
}








