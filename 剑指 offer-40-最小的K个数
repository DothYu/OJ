题目描述
输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。



=========================================================================================
// 利用快排的partition思想，时间复杂度O(n),空间复杂度O(1)

import java.util.*;
public class Solution {
    public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) {
        ArrayList<Integer> result = new ArrayList<>();
        int n = input.length;
        if (n == 0 || k <= 0 || k > n) {
            return result;
        }
        int start = 0, end = n - 1;
        int index = partition(input, start, end);
        while (index != k - 1) {
            if (index > k - 1) {
                end = index - 1;
                index = partition(input, start, end);
            } else {
                start = index + 1;
                index = partition(input, start, end);
            }
        }
        for (int i = 0; i < k; i ++) {
            result.add(input[i]);
        }
        return result;
    }
    private int partition(int[] input, int start, int end) {
        int temp = input[start];
        while (start < end) {
            while (start < end && input[end] >= temp) {
                end --;
            }
            if (start < end) {
                input[start] = input[end];
                start ++;
            }
            while (start < end && input[start] <= temp) {
                start ++;
            }
            if (start < end) {
                input[end] = input[start];
                end --;
            }
        }
        input[start] = temp;
        return start;
    }
}



=========================================================================================
// 最大堆
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Comparator;
public class Solution {
    public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) {
        ArrayList<Integer> result = new ArrayList<>();
        int n = input.length;
        if (n == 0 || k <= 0 || k > n) {
            return result;
        }
        PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(k, new Comparator<Integer>(){
            @Override
            public int compare(Integer o1, Integer o2) {
                return o2.compareTo(o1);
            }
        });
        for (int i = 0; i < n; i ++) {
            if (maxHeap.size() < k) {
                maxHeap.offer(input[i]);
            } else if (maxHeap.peek() > input[i]) {
                maxHeap.poll();
                maxHeap.offer(input[i]);
            }
        }
        for (Integer i: maxHeap) {
            result.add(i);
        }
        return result;
    }
}
