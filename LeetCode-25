[hard]
25. Reverse Nodes in k-Group


Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. 
If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

Example:

Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

Note:

Only constant extra memory is allowed.
You may not alter the values in the list's nodes, only nodes itself may be changed.


=========================================
// non-recursion
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || k <= 1) {
            return head;
        }
        ListNode root = new ListNode(0);
        root.next = head;
        ListNode curr = root;
        while (true) {
            ListNode first = curr.next;
            ListNode temp = curr;
            boolean flag = false;
            for (int i = 0; i < k; i ++) {
                temp = temp.next;
                if (temp == null) {
                    // 表示这段长度不够k，则无需排序
                    flag = true;
                    break;
                }
            }
            if (flag || temp == null) {
                break;
            }
            ListNode last = temp;

            ListNode newFirst = last.next;
            ListNode prev = last.next;
            ListNode x = first;
            while (x != null && x != newFirst) {
                ListNode y = x.next;
                x.next = prev;
                prev = x;
                x = y;
            }
            curr.next = last;

            curr = first;
        }
        return root.next;
    }
}


==============================================
// recursion
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        int count = 0;
        ListNode curr = head;
        while (curr != null && count != k) {
            curr = curr.next;
            count ++;
        }
        if (count == k) {
            curr = reverseKGroup(curr, k);
            while (count -- > 0) {
                ListNode temp = head.next;
                head.next = curr;
                curr = head;
                head = temp;
            }
            head = curr;
        }
        return head;
    }
}





