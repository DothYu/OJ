[Easy]
160. Intersection of Two Linked Lists

具体题目内容见LeetCode.

------------------------------------------------------------------------------------------------

Solution One: 时间复杂度O(n),空间复杂度O(1)
/** 方法一：
 *  1. 求出两条链表的长度
 *  2. 将长的那条链表向前移动len1-len2
 *  3. 然后依次开始比对两条链表元素，当出现相同元素时，即为交叉点
 */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        int lenA = getLength(headA), lenB = getLength(headB);
        while(lenA > lenB) {
            headA = headA.next;
            lenA --;
        }
        while(lenA < lenB) {
            headB = headB.next;
            lenB --;
        }
        while(headA != headB) {
            headA = headA.next;   // 注意：这里并不是比对链表的值，而是比较的链表本身
            headB = headB.next;
        }
        return headA;
    }
    public int getLength(ListNode n) {
        int len = 0;
        while(n != null) {
            len ++;
            n = n.next;
        }
        return len;
    }
}


------------------------------------------------------------------------------------------------

Solution Two: 时间复杂度O(n),空间复杂度O(1)
/** 方法二：
 *  1. 用环的思想
 *  2. 分别遍历两条链表，当遍历完一个链表时，跳到另一个链表头开始继续遍历
 *  3. 两个指针最后会相等；
 *  4. 分两种情况，一种情况是在交点处相遇，另一种情况是在各自的末尾的空节点处相等。
 *  5. 为什么一定会相等呢，因为两个指针走过的路程相同，是两个链表的长度之和，所以一定会相等。
 */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null)
            return null;
        ListNode a = headA;
        ListNode b = headB;
        while(headA != headB) {
            headA = (headA!=null) ? headA.next : b;
            headB = (headB!=null) ? headB.next : a;
        }
        return headA;
    }
}
