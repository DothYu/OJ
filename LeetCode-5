[Medium]
5. Longest Palindromic Substring

Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example 1:

Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.

Example 2:

Input: "cbbd"
Output: "bb"



============================================================================================================

// Solution One: Time complexity: O(n^2), Space complexity: O(n^2)
// DP
// "aba"是回文，那么dabad显然也是回文，因为两边的字符相同
// 所以：P(i, j) = (P(i+1, j-1) and Si == Sj)
// 边界为：P(i, i) = true, P(i, i+1) = (Si == Si+1)
// 从字符串末尾开始判断，依次往前

class Solution {
    public String longestPalindrome(String s) {
        int n = s.length();
        String result = "";
        boolean[][] dp = new boolean[n][n];
        for (int i = n - 1; i >= 0; i --) {
            for (int j = i; j < n; j ++) {
                dp[i][j] = (s.charAt(i) == s.charAt(j)) && (j < i + 3  || dp[i + 1][j - 1]);  // 注意这里j < i + 3的判断，推敲一下
                if (dp[i][j] && (result == "" || j - i + 1 > result.length()))  // 同样注意这里的条件判断
                    result = s.substring(i, j + 1);
            }
        }
        return result;
    }
}



============================================================================================================
// Solution One: Time complexity: O(n^2), Space complexity: O(1)
// Expand Around Center
// 因为回文是关于中心镜像，因此，一个回文可以通过从中心往外扩散得到。在长为n的字符串中，共有2n-1个中心。例子： a b c.

// nice solution！寻找最长回文，通过从中心向两边扩散的方法寻找该中心的最长回文。 依次遍历中心，最终寻找到最长的回文,时间复杂度O(n^2).

class Solution {
    public String longestPalindrome(String s) {
        if (s == null || s.length() < 1)    return "";
        int start = 0, end = 0;
        for (int i = 0; i < s.length(); i ++) {
            int len1 = expandAroundCenter(s, i, i);   // 这两步很关键，这一行表示下标为i的元素为中心。
            int len2 = expandAroundCenter(s, i, i + 1); // 这一行表示下标为i与i+1之间 为中心。这样可以遍历所有2n-1个中心。
            int len = Math.max(len1, len2);
            if (len > end - start) {          // 这里处理最长回文，不仅保存了长度，还保存了子字符串的起始位置。
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }
        return s.substring(start, end + 1);
    }
    
    // 从某中心往两边扩散，得到的最长回文。
    public int expandAroundCenter(String s, int left, int right) {
        int L = left, R = right;
        while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {
            L --;
            R ++;
        }
        return R - L - 1;
    }
}
