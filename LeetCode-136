[Easy]
136. Single Number

Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,1]
Output: 1
Example 2:

Input: [4,1,2,1,2]
Output: 4



=====================================================================================================================
// Solution One: Time complexity:O(), Space complexity: O()
// 先排序，然后将第一个元素与后一个元素进行比较，若相同，则指针跳转到第三个元素，将其与第四个元素比较，即两个两个比较，依次类推，注意边界

class Solution {
    public int singleNumber(int[] nums) {
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i ++) {
            if (nums[i] != nums[i + 1] || (i + 1) == nums.length) return nums[i];
            if (nums[i] == nums[i + 1]) {
                i ++;
                continue;
            }
        }
        return nums[0];
    }
}

//Runtime: 3 ms, faster than 42.82% of Java online submissions for Single Number.
//Memory Usage: 42.3 MB, less than 5.00% of Java online submissions for Single Number.



=====================================================================================================================
// Solution Two: Time complexity:O(n), Space complexity: O(n)
// 使用HashMap

class Solution {
    public int singleNumber(int[] nums) {
        HashMap<Integer, Integer> hm = new HashMap<>();
        for (int i = 0; i < nums.length; i ++) {
            if (hm.containsKey(nums[i]))
                hm.remove(nums[i]);
            else
                hm.put(nums[i], 1);
        }
        for (int key : hm.keySet()) {
            return key;
        }
        return nums[0];
    }
}

// Runtime: 7 ms, faster than 33.65% of Java online submissions for Single Number.
// Memory Usage: 40.4 MB, less than 44.41% of Java online submissions for Single Number.



=====================================================================================================================
// Solution Three: Time complexity:O(n), Space complexity: O(1)
// Bit Manipulation
// 1. If we take XOR of zero and some bit, it will return that bit
//      a⊕0=a
// 2. If we take XOR of two same bits, it will return 0
//      a⊕a=0
// 3. a⊕b⊕a=(a⊕a)⊕b=0⊕b=b
// So we can XOR all bits together to find the unique number.

// fucking awesome!
class Solution {
    public int singleNumber(int[] nums) {
        int res = 0;
        for (int n: nums){
            res ^= n;
        }
        return res;
    }
}


//Runtime: 0 ms, faster than 100.00% of Java online submissions for Single Number.
//Memory Usage: 42 MB, less than 8.15% of Java online submissions for Single Number.
