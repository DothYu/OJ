[Easy]
28. Implement strStr()

Implement strStr().
Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

Example 1:

Input: haystack = "hello", needle = "ll"
Output: 2

Example 2:

Input: haystack = "aaaaa", needle = "bba"
Output: -1

Clarification:
What should we return when needle is an empty string? This is a great question to ask during an interview.
For the purpose of this problem, we will return 0 when needle is an empty string.
This is consistent to C's strstr() and Java's indexOf().

----------------------------------------------------------------------------------------

Solution One:
// 方法一：时间复杂度O(n),空间复杂度O(1)
// 将haystack的长度减去needle的长度作为循环次数
// 然后通过将haystack截取needle的长度与needle比对（通过String.equals()）

class Solution {
    public int strStr(String haystack, String needle) {
        int l1 = haystack.length(), l2 = needle.length();
        if(l1 < l2)
            return -1;
        if(l2 == 0)
            return 0;
        int x = l1-l2;
        for(int i=0; i<=x; i++) {
            if(haystack.substring(i, i+l2).equals(needle)){
                return i;
            }
        }
        return -1;
    }
}


/**Success
Runtime: 2 ms, faster than 100.00% of Java online submissions for Implement strStr().
Memory Usage: 37.4 MB, less than 83.90% of Java online submissions for Implement strStr().
**/


================================
class Solution {
    public int strStr(String haystack, String needle) {
        if (needle == null || needle.length() == 0) {
            return 0;
        }
        if (haystack == null || haystack.length() < needle.length()) {
            return -1;
        }
        int len = needle.length();
        int left = 0, right = left + len - 1;
        while (right < haystack.length()) {
            if (haystack.substring(left, right + 1).equals(needle)) {
                return left;
            }
            left ++;
            right ++;
        }
        return -1;
    }
}
