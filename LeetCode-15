[Medium]
15. 3Sum

Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? 
Find all unique triplets in the array which gives the sum of zero.

Note:

The solution set must not contain duplicate triplets.

Example:

Given array nums = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]



===========================================================================================

// Solution One:
// 将数组排序，遍历三元组第一个元素的所有可能索引
// 对于每个可能的第一个元素，对剩下的数组进行标准的双向2Sum扫描
// 注意要跳过相等的元素
    
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new LinkedList<>();
        for (int i = 0; i < nums.length - 2; i ++) {
            if (i == 0 || (i > 0 && nums[i - 1] != nums[i])) {  // 过滤三元组第一个元素中相等的元素
                int l = i + 1, h = nums.length - 1, sum = 0 - nums[i];
                while (l < h) {
                    if (nums[l] + nums[h] == sum) {
                        res.add(Arrays.asList(nums[i], nums[l], nums[h]));    // Arrays.asList()
                        while (l < h && nums[l] == nums[l + 1]) l ++;   // 过滤相等的元素
                        while (l < h && nums[h] == nums[h - 1]) h --;   // 过滤相等的元素
                        l ++;
                        h --;
                    } else if (nums[l] + nums[h] < sum) {
                        l ++;
                    } else {
                        h --;
                    }
                }
            }
        }
        return res;
    }
}
