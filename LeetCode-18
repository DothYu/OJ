[Medium]
18. 4Sum

Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums 
such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:

The solution set must not contain duplicate quadruplets.

Example:

Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]




===================================================
// Solution One:
// 将数组排序，遍历四元组第一个元素的所有可能索引
// 对于每一个可能的第一个元素，对于剩下的数组进行3Sum处理
// 注意跳过相同结果

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> res = new LinkedList<>();
        Arrays.sort(nums);
        for (int i = 0; i < nums.length - 3; i ++) {
            if (i > 0 && nums[i - 1] == nums[i])    continue;
            // 处理3Sum
            for (int j = i + 1; j < nums.length - 2; j ++) {
                if ( j > i + 1 && nums[j] == nums[j - 1])   continue;
                int l = j + 1, h = nums.length - 1;
                while (l < h) {
                    int sum = nums[i] + nums[j] + nums[l] + nums[h];
                    if (sum == target) {
                        res.add(Arrays.asList(nums[i], nums[j], nums[l], nums[h]));
                        l ++;
                        h --;
                        while (l < h && nums[l] == nums[l - 1]) l ++;
                        while (l < h && nums[h] == nums[h + 1]) h --;
                    } else if (sum > target) {
                        h --;
                    } else {
                        l ++;
                    }
                }
            }
        }
        return res;
    }
}


===================================================
import java.util.ArrayList;
import java.util.Arrays;

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> result  = new ArrayList<>();
        Arrays.sort(nums);
        for (int i = 0; i < nums.length - 3; i ++) {
            if (i == 0 || nums[i] != nums[i - 1]) {
                for (int j = i + 1; j < nums.length - 2; j ++) {
                    if (j == i + 1 || nums[j] != nums[j - 1]) {
                        int left = j + 1, right = nums.length - 1;
                        while (left < right) {
                            int sum = nums[i] + nums[j] + nums[left] + nums[right];
                            if (sum == target) {
                                result.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));
                                while (left < right && nums[left] == nums[left + 1]) {
                                    left ++;
                                }
                                while (left < right && nums[right] == nums[right - 1]) {
                                    right --;
                                }
                                left ++;
                                right --;
                            } else if (sum > target) {
                                right --;
                            } else {
                                left ++;
                            }
                        }
                    }
                }
            }
        }
        return result;
    }
}
