[Medium]
Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place and use only constant extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.

1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1



==========================
// 自己做的方法 时间复杂度O(n), 空间复杂度O(1)
class Solution {
    public void nextPermutation(int[] nums) {
        if (nums.length <= 1) {
            return;
        }
        int n = nums.length - 1;
        while (n > 0 && nums[n - 1] >= nums[n]) {
            n --;
        } 
        if (n == 0) {
            reverse(nums, 0, nums.length - 1);
        } else {
            // 从下标区间为[n, nums.length - 1]中，找到第一个比nums[n - 1]大的数字
            int index =  bigger(nums, n - 1);
            swap(nums, n - 1, index);
            reverse(nums, n, nums.length - 1);
        }
    }
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    private int bigger(int[] nums, int index) {
        int left = index + 1, right = nums.length - 1;
        int target = nums[index];
        while (left + 1 < right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] > target) {
                left = mid;
            } else {
                right = mid;
            }
        }
        if (nums[right] > target) {
            return right;
        } else {
            return left;
        }
    }
    private void reverse(int[] nums, int left, int right) {
        while (left < right) {
            swap(nums, left, right);
            left ++;
            right --;
        }
    }
}




