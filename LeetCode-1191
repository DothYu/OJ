[Medium]
1191. K-Concatenation Maximum Sum

Given an integer array arr and an integer k, modify the array by repeating it k times.

For example, if arr = [1, 2] and k = 3 then the modified array will be [1, 2, 1, 2, 1, 2].

Return the maximum sub-array sum in the modified array. Note that the length of the sub-array can be 0 and its sum in that case is 0.

As the answer can be very large, return the answer modulo 10^9 + 7.

 

Example 1:

Input: arr = [1,2], k = 3
Output: 9
Example 2:

Input: arr = [1,-2,1], k = 5
Output: 2
Example 3:

Input: arr = [-1,-2], k = 7
Output: 0
 

Constraints:

1 <= arr.length <= 10^5
1 <= k <= 10^5
-10^4 <= arr[i] <= 10^4




=======================================
class Solution {
    private long mod = 1000000007;
    public int kConcatenationMaxSum(int[] arr, int k) {
        if (k == 0) {
            return 0;
        }
        if (k == 1) {
            return maxSubArray(arr);
        }
        int two = maxSubArray2(arr);
        long sum = 0;
        for (int i = 0; i < arr.length; i ++) {
            sum += arr[i];
        }
        if (sum > 0) {
            k -= 2;
            long result = 0;
            while (k -- > 0) {
                result = (result + sum) % mod;
            }
            result = (result + two) % mod;
            return (int)result;
        } else {
            return (int)(two % mod);
        }    
    }
    private int maxSubArray(int[] arr) {
        long max = 0, sum = 0;
        for (int i = 0; i < arr.length; i ++) {
            if (sum >= 0) {
                sum = sum + arr[i];
            } else {
                sum = arr[i];
            }
            max = Math.max(max, sum);
        }
        return (int)(max % mod);
    }
    private int maxSubArray2(int[] arr) {
        long max = 0, sum = 0;
        for (int i = 0; i < arr.length * 2; i ++) {
            if (sum >= 0) {
                sum = sum + arr[i % arr.length];
            } else {
                sum = arr[i % arr.length];
            }
            max = Math.max(max, sum);
        }
        return (int)(max % mod);
    }
}
