[Medium]
516. Longest Palindromic Subsequence

Given a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.

Example 1:
Input:

"bbbab"
Output:
4
One possible longest palindromic subsequence is "bbbb".
Example 2:
Input:

"cbbd"
Output:
2
One possible longest palindromic subsequence is "bb".



=======================
// 直接将string翻转，然后把问题转换为 LCS
// 

class Solution {
    public int longestPalindromeSubseq(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        String temp = new StringBuilder(s).reverse().toString();
        int n = s.length();
        int[][] dp = new int[n + 1][n + 1];
        for (int i = 1; i <= s.length(); i ++) {
            for (int j = 1; j <= temp.length(); j ++) {
                if (s.charAt(i - 1) == temp.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[n][n];
    }
}



========================================
// DP
// if(s[i] == s[j]) 
//     dp[i][j] = dp[i + 1][j - 1] + 2;
// else
//     dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);


class Solution {
    public int longestPalindromeSubseq(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        int n = s.length();
        int[][] dp = new int[n][n];
        for (int i = n - 1; i >= 0; i --) {
            dp[i][i] = 1;
            for (int j = i + 1; j < n; j ++) {
                if (s.charAt(i) == s.charAt(j)) {
                    dp[i][j] = dp[i + 1][j - 1] + 2;
                } else {
                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[0][n - 1];
    }
}


===============================
// optimize the above solution
// space complexity: O(n)
// We can reduce the space complexity to O(n), by noticing that dp[i][j] only depends on the current row dp[i][j-1], 
// and the row below it (dp[i+1][j-1] and dp[i+1][j]). So instead of storing an entire 2-D array of data, a 1-D array of data will be enough. Mentioning this will score bonus points in an interview.
// Coding it is tricky. Now, from dp[j], to get the value:
// dp[i+1][j] is "down". It becomesdp[j]
// dp[i][j-1] is "left". It becomes dp[j-1]
// dp[i+1][j-1] is "down-left". It becomes dp[j-1] before we overwrite it, 
// so we preserve that value across iterations of the inner for loop. This is done using 2 variables: pre and tmp (see code below)

class Solution {
    public int longestPalindromeSubseq(String str) {
        int[] dp = new int[str.length()];
        for (int i = str.length() - 1; i >= 0; i--) {
            dp[i] = 1;
            int pre = 0;
            for (int j = i + 1; j < str.length(); j++) {
                int tmp = dp[j];
                if (str.charAt(i) == str.charAt(j)) {
                    dp[j] = 2 + pre;
                } else {
                    dp[j] = Math.max(dp[j], dp[j - 1]);
                }
                pre = tmp;
            }
        }
        return dp[str.length() - 1];
    }
}





